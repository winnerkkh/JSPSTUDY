package model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Vector;

//오라클 데이터 베이스에 연결하고 select, insert, update, delete작업을 실행해주는 클래스
public class MemberDAO {

	// 오라클 접속하는 소스를 작성
	String id = "kh"; // 접속 아이디
	String pass = "kh";
	String url = "jdbc:oracle:thin:@localhost:1521:xe"; // 접속 url

	Connection con; // 데이터베이스에 접근할수 있도록 설정해주는 객체 선언
	PreparedStatement pstmt; // 데이터베이스에서 쿼리를 실행시켜주는 객체 선언
	ResultSet rs; // 데이터베이스의 테이블의 결과를 리턴받아 자바에 저장해주는 객체

	// 데이터 베이스에 접근할수 있도록 도와주는 메소드
	public void getCon() {

		try {
			// 1단계. 해당 데이터 베이스를 사용한다고 선언(클래스를 등록 = 오라클용을 사용)
			Class.forName("oracle.jdbc.driver.OracleDriver");

			// 2단계. 해당 데이터 베이스에 접속
			con = DriverManager.getConnection(url, id, pass);

		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}

	// 데이터 베이스에 한사람의 회원 정보를 저장해주는 메소드
	public void insertMember(MemberBean mbean) {

		try {

			getCon();// 1단계와 2단계는 모든 메소드들에 중복으로 들어가기에 메소드로 만든후 적으면 자동 오라클 접속 저장

			// 3단계. 쿼리준비(바인딩 변수 사용)
			String sql = "insert into member values(?,?,?,?,?,?,?,?)";

			// 쿼리를 사용하도록 설정
			PreparedStatement pstmt = con.prepareStatement(sql); // jsp에서 쿼리를 사용하도록 설정

			// ?에 맞게 데이터를 맵핑
			pstmt.setString(1, mbean.getId());
			pstmt.setString(2, mbean.getPass1());
			pstmt.setString(3, mbean.getEmail());
			pstmt.setString(4, mbean.getTel());
			pstmt.setString(5, mbean.getHobby());
			pstmt.setString(6, mbean.getJob());
			pstmt.setString(7, mbean.getAge());
			pstmt.setString(8, mbean.getInfo());

			// 4단계. 오라클에서 쿼리를 실행하시오
			pstmt.executeUpdate();// insert, update, delete시 사용하는 메소드

			// 5단계. 자원 반납
			con.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 모든 회원의 정보를 리턴해주는 메소드 호출
	// 리턴 타입은 Vector<MemberBean>
	public Vector<MemberBean> allSelectMember() {

		// 가변길이로 데이터를 저장
		Vector<MemberBean> v = new Vector<>();

		// 무조건 데이터 베이스는 예외처리를 반드시 한다.
		try {

			// 1단계= 커넥션 연결
			getCon();

			// 2단계= 쿼리 준비
			String sql = "select * from member";
			// 쿼리를 실행 시켜주는 객체 선언
			pstmt = con.prepareStatement(sql);

			// 쿼리를 실행 시킨 결과를 리턴해서 받아줌(오라클 테이블의 검색된 결과를 자바객체에 저장)
			rs = pstmt.executeQuery();

			// 반복문을 사용해서 rs에 저장된 데이터를 추출
			while (rs.next()) { // 저장된 데이터 만큼까지 반복문을 돌리겠다라는 뜻
				MemberBean bean = new MemberBean(); // 칼럼으로 나뉘어진 데이터를 빈클래스에 저장
				bean.setId(rs.getString(1)); //
				bean.setPass1(rs.getString(2));
				bean.setEmail(rs.getString(3));
				bean.setTel(rs.getString(4));
				bean.setHobby(rs.getString(5));
				bean.setJob(rs.getString(6));
				bean.setAge(rs.getString(7));
				bean.setInfo(rs.getString(8));

				// 패키징된 memberbean 클래스를 벡터에 저장
				v.add(bean); // 0번지부터 순서대로 데이터가 저장
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if(rs !=null ) rs.close();
				if(pstmt !=null) pstmt.close();
				if(con !=null) con.close();

			} catch (Exception e2) {
				System.out.println(e2.getMessage());
			}

		}
		return v;
	}

	
	//한사람의 대한 정보를 리턴하는 메소드 작성
	//리턴타입은 MemberBean
	public MemberBean oneSelectMember(String id) {
		
		//한사람에 대한 정보만 리턴하기에 빈클래스 객체 생성(벡터나 어레이리스트 클래스를 사용할 필요가 없음)
		MemberBean bean = new MemberBean();
		
		
		try {
			//커넥션 연결
			getCon();
			
			//쿼리준비
			String sql = "select * from member where id = ?";
			
			pstmt = con.prepareStatement(sql);
			
			//?에 값을 맵핑
			pstmt.setString(1, id);
			
			//쿼리 실행
			rs = pstmt.executeQuery();
			
			
			if(rs.next()) { //레코드가 있다면
				bean.setId(rs.getString(1)); //
				bean.setPass1(rs.getString(2));
				bean.setEmail(rs.getString(3));
				bean.setTel(rs.getString(4));
				bean.setHobby(rs.getString(5));
				bean.setJob(rs.getString(6));
				bean.setAge(rs.getString(7));
				bean.setInfo(rs.getString(8));
			}
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}finally {
			
				//자원반납
			try {
				if(rs !=null ) rs.close();
				if(pstmt !=null) pstmt.close();
				if(con !=null) con.close();

			} catch (Exception e2) {
				System.out.println(e2.getMessage());
			  }
		}
		
		return bean;
	}
	
	//한회원의 패스워드값을 리턴하는 메소드 작성
	public String getPass(String id) {
		//스트링으로 리턴을 해야하기에 스트링변수 선언
		String pass ="";
		
		try {
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		
		return pass;
	}
	
}
